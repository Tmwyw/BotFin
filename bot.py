import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler
import requests
from datetime import datetime
import random
import os  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º os –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import matplotlib.pyplot as plt
import io
from telegram import InputFile

# –¢–≤–æ–π API –∫–ª—é—á –¥–ª—è –æ–±–º–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
API_KEY = "e9313eae0113f4c915d2946b3a633c1e"

# –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
CURRENCY_PAIRS = [
    ('USD', 'RUB'),
    ('EUR', 'USD'),
    ('GBP', 'USD'),
    ('AUD', 'USD'),
    ('CAD', 'USD'),
    ('NZD', 'USD'),
    ('CHF', 'USD'),
    ('JPY', 'USD'),
    ('USD', 'CNY'),
    ('USD', 'TRY')
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
def get_currency_rate(base_currency, target_currency):
    try:
        url = f'https://api.exchangeratesapi.io/v1/latest?access_key={API_KEY}&symbols={target_currency}'
        response = requests.get(url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
        data = response.json()
        
        if 'rates' in data:
            return data['rates'][target_currency]
        else:
            return None
    except requests.RequestException:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LONG-—Å–∏–≥–Ω–∞–ª–∞
def generate_long_signal(base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss):
    signal = (
        f"üî•LONGüü¢üîº\n\n"
        f"üî•#{base_currency}/{target_currency}‚òùÔ∏è\n\n"
        f"üíµ–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:üìà {current_price}\n\n"
        f"üéØTake Profit 1: üìå{take_profit1}\n"
        f"üéØTake Profit 2: üìå{take_profit2}\n\n"
        f"‚õîÔ∏èSTOPüí•{stop_loss}\n\n"
    )
    return signal

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SHORT-—Å–∏–≥–Ω–∞–ª–∞
def generate_short_signal(base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss):
    signal = (
        f"üî•SHORTüî¥üîΩ\n\n"
        f"üî•#{base_currency}/{target_currency}‚òùÔ∏è\n\n"
        f"üíµ–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:üìâ {current_price}\n\n"
        f"üéØTake Profit 1: üìå{take_profit1}\n"
        f"üéØTake Profit 2: üìå{take_profit2}\n\n"
        f"üö´STOPüí•{stop_loss}"
    )
    return signal

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
def plot_currency_chart(base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss, signal_type):
    plt.figure(figsize=(10, 5))
    
    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
    prices = [current_price * (0.95 + 0.01 * i) for i in range(10)]
    time_points = range(len(prices))

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.plot(time_points, prices, label=f'{base_currency}/{target_currency}', color='blue')

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –¥–ª—è Take Profit –∏ Stop Loss
    plt.axhline(take_profit1, color='green', linestyle='--', label='Take Profit 1')
    plt.axhline(take_profit2, color='green', linestyle='--', label='Take Profit 2')
    plt.axhline(stop_loss, color='red', linestyle='--', label='Stop Loss')

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
    if signal_type == 'LONG':
        plt.annotate('Entry (LONG)', xy=(5, current_price), xytext=(6, current_price * 1.02),
                     arrowprops=dict(facecolor='green', shrink=0.05))
    else:
        plt.annotate('Entry (SHORT)', xy=(5, current_price), xytext=(6, current_price * 0.98),
                     arrowprops=dict(facecolor='red', shrink=0.05))
        
         # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    plt.legend()
    plt.title(f'–ì—Ä–∞—Ñ–∏–∫ –¥–ª—è {base_currency}/{target_currency}')
    plt.xlabel('–í—Ä–µ–º—è')
    plt.ylabel('–¶–µ–Ω–∞')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plt.close()

    return buffer

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ Telegram
async def send_chart(update, context, base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss, signal_type):
    chat_id = update.message.chat_id
    buffer = plot_currency_chart(base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss, signal_type)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ —á–∞—Ç
    await context.bot.send_photo(chat_id=chat_id, photo=InputFile(buffer, filename='chart.png'))

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –≤–∞–ª—é—Ç–Ω—ã–º –ø–∞—Ä–∞–º
async def send_signals(update: Update, context):
    chat_id = update.message.chat_id
    

    for base_currency, target_currency in CURRENCY_PAIRS[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
        current_price = get_currency_rate(base_currency, target_currency)
        if current_price:
            # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –º–µ–∂–¥—É LONG –∏ SHORT
            if random.choice([True, False]):
                # LONG: Take Profit –≤—ã—à–µ —Ü–µ–Ω—ã, Stop Loss –Ω–∏–∂–µ
                take_profit1 = current_price * 1.05  # –ù–∞–ø—Ä–∏–º–µ—Ä, 5% –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                take_profit2 = current_price * 1.1   # –ù–∞–ø—Ä–∏–º–µ—Ä, 10% –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                stop_loss = current_price * 0.95    # –ù–∞–ø—Ä–∏–º–µ—Ä, 5% –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                signal = generate_long_signal(base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss)
                signal_type = 'LONG'
            else:
                # SHORT: Take Profit –Ω–∏–∂–µ —Ü–µ–Ω—ã, Stop Loss –≤—ã—à–µ
                take_profit1 = current_price * 0.95  # –ù–∞–ø—Ä–∏–º–µ—Ä, 5% –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                take_profit2 = current_price * 0.9   # –ù–∞–ø—Ä–∏–º–µ—Ä, 10% –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                stop_loss = current_price * 1.05    # –ù–∞–ø—Ä–∏–º–µ—Ä, 5% –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                signal = generate_short_signal(base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss)
                signal_type = 'SHORT'
            
            await context.bot.send_message(chat_id=chat_id, text=signal)


            # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
            await send_chart(update, context, base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss, signal_type)
        else:
            await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {base_currency}/{target_currency}")

            

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    await send_signals(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
async def stop(update: Update, context):
    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JobQueue
    app = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã /start –∏ /stop
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))

    print("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è run_polling()")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    app.run_polling()
    print("–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è run_polling()")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

if __name__ == '__main__':
    main()
