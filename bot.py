import random
import requests
import matplotlib.pyplot as plt
import numpy as np
from telegram import Bot
from telegram.ext import Application, CommandHandler
import asyncio
import datetime

API_KEY_ALPHA_VANTAGE = '74O1PFK2C59IB5ND'
TG_BOT_TOKEN = '7449818362:AAHrejKv90PyRkrgMTdZvHzT9p44ePlZYcg'

# –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
CURRENCY_PAIRS = [
    ('EUR', 'GBP'),
    ('AUD', 'CAD'),
    ('GBP', 'CHF'),
    ('NZD', 'CAD'),
    ('EUR', 'AUD'),
    ('AUD', 'NZD'),
    ('EUR', 'CHF'),
    ('GBP', 'AUD'),
    ('CAD', 'CHF'),
    ('NZD', 'CHF')
]

bot = Bot(token=TG_BOT_TOKEN)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
def get_currency_data(from_currency, to_currency):
    url = f'https://www.alphavantage.co/query?function=FX_INTRADAY&from_symbol={from_currency}&to_symbol={to_currency}&interval=1min&apikey={API_KEY_ALPHA_VANTAGE}'
    response = requests.get(url)
    data = response.json()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    return list(data['Time Series FX (1min)'].values())[0]['1. open']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
def send_chart(pair, signal):
    from_currency, to_currency = pair
    current_price = get_currency_data(from_currency, to_currency)
    prices = np.random.normal(float(current_price), 0.005, 100)  # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    times = np.linspace(0, 10, 100)

    plt.figure(figsize=(10, 5))
    plt.plot(times, prices, label=f'{from_currency}/{to_currency} Price')
    plt.title(f'{from_currency}/{to_currency} Chart with {signal}')
    plt.axhline(y=min(prices), color='r', linestyle='--', label="Support Level")
    plt.axhline(y=max(prices), color='g', linestyle='--', label="Resistance Level")
    plt.legend()

    file_path = '/mnt/data/chart.png'
    plt.savefig(file_path)
    plt.close()

    bot.send_photo(chat_id='YOUR_CHAT_ID', photo=open(file_path, 'rb'))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
async def send_signal(update, context):
    # –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    pair = random.choice(CURRENCY_PAIRS)
    from_currency, to_currency = pair
    signal_type = random.choice(['LONG üü¢üîº', 'SHORT üî¥üîΩ'])
    time_options = ['1M', '2M', '3M', '5M']
    deal_time = random.choice(time_options)

    current_price = get_currency_data(from_currency, to_currency)
    template = f"""
    üî•{signal_type}
    üî•{from_currency}/{to_currency} OTCüìå
    ‚åõÔ∏è –í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: {deal_time}
    üíµ–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:üìâ {current_price}
    """

    send_chart(pair, signal_type)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    await update.message.reply_text(template)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ Updater
    application = Application.builder().token(TG_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler('signal', send_signal))

    # –ó–∞–ø—É—Å–∫ polling
    await application.run_polling()

if __name__ == '__main__':
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
    except RuntimeError:
        asyncio.run(main())
