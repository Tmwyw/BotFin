import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler
import requests
from telegram.ext import JobQueue
from datetime import datetime
import random
import os  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º os –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –¢–≤–æ–π API –∫–ª—é—á –¥–ª—è –æ–±–º–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
API_KEY = "e9313eae0113f4c915d2946b3a633c1e"

# –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
CURRENCY_PAIRS = [
    ('USD', 'RUB'),
    ('EUR', 'USD'),
    ('GBP', 'USD'),
    ('AUD', 'USD'),
    ('CAD', 'USD'),
    ('NZD', 'USD'),
    ('CHF', 'USD'),
    ('JPY', 'USD'),
    ('USD', 'CNY'),
    ('USD', 'TRY')
]

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å
signals_sent_today = 0
current_day = datetime.now().day

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
def get_currency_rate(base_currency, target_currency):
    try:
        url = f'https://api.exchangeratesapi.io/v1/latest?access_key={API_KEY}&symbols={target_currency}'
        response = requests.get(url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
        data = response.json()
        
        if 'rates' in data:
            return data['rates'][target_currency]
        else:
            return None
    except requests.RequestException as e:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LONG-—Å–∏–≥–Ω–∞–ª–∞
def generate_long_signal(base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss):
    signal = (
        f"üî•LONGüü¢üîº\n\n"
        f"üî•#{base_currency}/{target_currency}‚òùÔ∏è\n\n"
        f"üíµ–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:üìà {current_price}\n\n"
        f"üéØTake Profit 1: üìå{take_profit1}\n"
        f"üéØTake Profit 2: üìå{take_profit2}\n\n"
        f"‚õîÔ∏èSTOPüí•{stop_loss}\n\n"
    )
    return signal

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SHORT-—Å–∏–≥–Ω–∞–ª–∞
def generate_short_signal(base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss):
    signal = (
        f"üî•SHORTüî¥üîΩ\n\n"
        f"üî•#{base_currency}/{target_currency}‚òùÔ∏è\n\n"
        f"üíµ–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:üìâ {current_price}\n\n"
        f"üéØTake Profit 1: üìå{take_profit1}\n"
        f"üéØTake Profit 2: üìå{take_profit2}\n\n"
        f"üö´STOPüí•{stop_loss}"
    )
    return signal

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –≤–∞–ª—é—Ç–Ω—ã–º –ø–∞—Ä–∞–º
async def send_signals(context):
    global signals_sent_today, current_day

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
    today = datetime.now().day
    if today != current_day:
        current_day = today
        signals_sent_today = 0

    # –ï—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 3 —Å–∏–≥–Ω–∞–ª–∞ –∑–∞ –¥–µ–Ω—å, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ
    if signals_sent_today >= 3:
        return

    chat_id = context.job.chat_id
    for base_currency, target_currency in CURRENCY_PAIRS:
        current_price = get_currency_rate(base_currency, target_currency)
        if current_price:
            # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –º–µ–∂–¥—É LONG –∏ SHORT
            if random.choice([True, False]):
                # LONG: Take Profit –≤—ã—à–µ —Ü–µ–Ω—ã, Stop Loss –Ω–∏–∂–µ
                take_profit1 = current_price * 1.05  # –ù–∞–ø—Ä–∏–º–µ—Ä, 5% –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                take_profit2 = current_price * 1.1   # –ù–∞–ø—Ä–∏–º–µ—Ä, 10% –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                stop_loss = current_price * 0.95    # –ù–∞–ø—Ä–∏–º–µ—Ä, 5% –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                signal = generate_long_signal(base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss)
            else:
                # SHORT: Take Profit –Ω–∏–∂–µ —Ü–µ–Ω—ã, Stop Loss –≤—ã—à–µ
                take_profit1 = current_price * 0.95  # –ù–∞–ø—Ä–∏–º–µ—Ä, 5% –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                take_profit2 = current_price * 0.9   # –ù–∞–ø—Ä–∏–º–µ—Ä, 10% –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                stop_loss = current_price * 1.05    # –ù–∞–ø—Ä–∏–º–µ—Ä, 5% –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                signal = generate_short_signal(base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss)
            
            await context.bot.send_message(chat_id=chat_id, text=signal)
            signals_sent_today += 1
            if signals_sent_today >= 3:
                return
        else:
            await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {base_currency}/{target_currency}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.job_queue.run_repeating(send_signals, interval=60, first=60, chat_id=update.message.chat_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
async def stop(update: Update, context):
    context.job_queue.stop()
    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JobQueue
    app = ApplicationBuilder().token(TOKEN).post_init(lambda app: app.job_queue.start()).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã /start –∏ /stop
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))

    print("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è run_polling()")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    app.run_polling()
    print("–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è run_polling()")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

if __name__ == '__main__':
    main()
