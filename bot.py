import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler
import random
import os
import time
from pocketoptionapi.stable_api import PocketOption  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ç–∞–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pocket Option API
def connect_pocket_option():
    ssid = os.getenv('42["auth", {"session":"ugceh9llu62egeenpnhalb629n", "isDemo":1, "uid":85002634, "platform":2}]') # –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SSID —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    api = PocketOption(ssid)
    check_connect, message = api.connect()

    if check_connect:
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pocket Option —É—Å–ø–µ—à–Ω–æ!")
        return api
    else:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Pocket Option: {message}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Pocket Option API
def get_currency_rate(base_currency, target_currency, api):
    asset = f"{base_currency}_{target_currency}"  # –ü—Ä–∏–º–µ—Ä: EUR_USD
    candles = api.get_candles(asset, 60)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ —Å–≤–µ—á–∏

    if candles:
        current_price = candles[-1]['close']  # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
        return current_price
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {asset}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LONG-—Å–∏–≥–Ω–∞–ª–∞
def generate_long_signal(base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss):
    signal = (
        f"üî•LONGüü¢üîº\n\n"
        f"üî•#{base_currency}/{target_currency}‚òùÔ∏è\n\n"
        f"üíµ–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:üìà {current_price}\n\n"
        f"üéØTake Profit 1: üìå{take_profit1}\n"
        f"üéØTake Profit 2: üìå{take_profit2}\n\n"
        f"‚õîÔ∏èSTOPüí•{stop_loss}\n\n"
    )
    return signal

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SHORT-—Å–∏–≥–Ω–∞–ª–∞
def generate_short_signal(base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss):
    signal = (
        f"üî•SHORTüî¥üîΩ\n\n"
        f"üî•#{base_currency}/{target_currency}‚òùÔ∏è\n\n"
        f"üíµ–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:üìâ {current_price}\n\n"
        f"üéØTake Profit 1: üìå{take_profit1}\n"
        f"üéØTake Profit 2: üìå{take_profit2}\n\n"
        f"üö´STOPüí•{stop_loss}"
    )
    return signal

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –≤–∞–ª—é—Ç–Ω—ã–º –ø–∞—Ä–∞–º
async def send_signals(update: Update, context):
    api = connect_pocket_option()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Pocket Option
    if api is None:
        await context.bot.send_message(chat_id=update.message.chat_id, text="–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Pocket Option.")
        return

    chat_id = update.message.chat_id
    
    CURRENCY_PAIRS = [
        ('EUR', 'USD'),
        ('GBP', 'USD'),
        ('AUD', 'USD'),
        ('USD', 'JPY'),
        ('USD', 'TRY')
    ]

    for base_currency, target_currency in CURRENCY_PAIRS:  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤–∞–ª—é—Ç–Ω—ã–º –ø–∞—Ä–∞–º
        current_price = get_currency_rate(base_currency, target_currency, api)
        if current_price:
            # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –º–µ–∂–¥—É LONG –∏ SHORT
            if random.choice([True, False]):
                # LONG: Take Profit –≤—ã—à–µ —Ü–µ–Ω—ã, Stop Loss –Ω–∏–∂–µ
                take_profit1 = current_price * 1.05  # –ù–∞–ø—Ä–∏–º–µ—Ä, 5% –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                take_profit2 = current_price * 1.1   # –ù–∞–ø—Ä–∏–º–µ—Ä, 10% –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                stop_loss = current_price * 0.95    # –ù–∞–ø—Ä–∏–º–µ—Ä, 5% –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                signal = generate_long_signal(base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss)
            else:
                # SHORT: Take Profit –Ω–∏–∂–µ —Ü–µ–Ω—ã, Stop Loss –≤—ã—à–µ
                take_profit1 = current_price * 0.95  # –ù–∞–ø—Ä–∏–º–µ—Ä, 5% –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                take_profit2 = current_price * 0.9   # –ù–∞–ø—Ä–∏–º–µ—Ä, 10% –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                stop_loss = current_price * 1.05    # –ù–∞–ø—Ä–∏–º–µ—Ä, 5% –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                signal = generate_short_signal(base_currency, target_currency, current_price, take_profit1, take_profit2, stop_loss)
            
            await context.bot.send_message(chat_id=chat_id, text=signal)
        else:
            await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {base_currency}/{target_currency}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    await send_signals(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
async def stop(update: Update, context):
    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JobQueue
    app = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã /start –∏ /stop
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))

    print("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è run_polling()")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    app.run_polling()
    print("–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è run_polling()")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

if __name__ == '__main__':
    main()
